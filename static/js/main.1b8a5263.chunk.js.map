{"version":3,"sources":["components/Form.js","components/Song.js","components/Artist.js","App.js","reportWebVitals.js","index.js"],"names":["Form","setSearchLyrics","useState","artist","song","search","setSearch","error","setError","handleChange","event","target","name","value","className","onSubmit","preventDefault","trim","action","htmlFor","type","placeholder","onChange","Song","lyrics","Artist","strArtist","logo","strArtistLogo","bio","strBiographyEN","fb","strFacebook","twitter","strTwitter","lastFM","strLastFMChart","Object","keys","length","random","Math","floor","src","alt","width","href","rel","App","searchLyrics","setLyrics","setArtist","lyricsError","setLyricsError","useEffect","fetchLyricsAPI","a","url","url2","Promise","all","axios","get","lyricsData","artistData","data","artists","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oQAiGeA,EA9FF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,gBAEb,EAA6BC,mBAAS,CACpCC,OAAQ,GACRC,KAAM,KAFR,mBAAOC,EAAP,KAAeC,EAAf,KAIA,EAA4BJ,oBAAS,GAArC,mBAAQK,EAAR,KAAeC,EAAf,KAESL,EAAkBE,EAAlBF,OAASC,EAASC,EAATD,KAGZK,EAAe,SAACC,GACpBJ,EAAU,2BACLD,GADI,kBAENK,EAAMC,OAAOC,KAAOF,EAAMC,OAAOE,UAiBtC,OACE,sBAAKC,UAAU,UAAf,UACE,qBAAKA,UAAU,YAAf,SACE,qBAAKA,UAAU,MAAf,SACE,sBACEC,SAlBW,SAACL,GACpBA,EAAMM,iBAGe,KAAlBb,EAAOc,QAAiC,KAAhBb,EAAKa,QAIhCT,GAAS,GAETP,EAAgBI,IALdG,GAAS,IAcHU,OAAO,GACPJ,UAAU,oDAHZ,SAKE,qCACE,wBAAQA,UAAU,0BAAlB,sDAGA,sBAAKA,UAAU,MAAf,UACE,qBAAKA,UAAU,WAAf,SACE,sBAAKA,UAAU,aAAf,UACE,uBAAOK,QAAQ,GAAf,kBACA,uBACEC,KAAK,OACLN,UAAU,eACVF,KAAK,OACLS,YAAY,YACZC,SAAUb,EACVI,MAAOT,SAIb,qBAAKU,UAAU,WAAf,SACE,sBAAKA,UAAU,aAAf,UACE,uBAAOK,QAAQ,GAAf,oBACA,uBACEC,KAAK,OACLN,UAAU,eACVF,KAAK,SACLS,YAAY,cACZC,SAAUb,EACVI,MAAOV,YAMf,wBACEiB,KAAK,SACLN,UAAU,qCAFZ,6BAUPP,GACC,mBAAGO,UAAU,qCAAb,yCCrEOS,EAfF,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACb,OAAIA,EAGF,sBAAKV,UAAU,oBAAf,UACE,6CACA,mBAAGA,UAAU,SAAb,SAAuBU,OALR,MCkCNC,EAnCA,SAAC,GAAc,IAAbtB,EAAY,EAAZA,OAEIS,EAAiHT,EAA5HuB,UAAgCC,EAA4FxB,EAA3GyB,cAAqCC,EAAsE1B,EAAtF2B,eAAkCC,EAAoD5B,EAAjE6B,YAA6BC,EAAoC9B,EAAhD+B,WAAqCC,EAAWhC,EAA3BiC,eAEzG,GAAkC,IAA/BC,OAAOC,KAAKnC,GAAQoC,OAAc,OAAO,KAE5C,IAAMC,EAASC,KAAKC,MAAM,EAAG,EAAED,KAAKD,UAEpC,OACE,sBAAK1B,UAAU,oBAAf,UACE,sBAAKA,UAAU,0BAAf,UACE,oBAAIA,UAAU,SAAd,SAAwBF,IACxB,qBAAK+B,IAAKhB,EAAMiB,IAAKhC,EAAMiC,MAAM,WAEnC,qBAAK/B,UAAU,cAAc6B,IAAKxC,EAAO,kBAAD,OAAmBqC,IAAWI,IAAKhC,EAAMiC,MAAM,QACvF,mBAAG/B,UAAU,eAAb,SAA6Be,IAC7B,oBAAGf,UAAU,aAAb,UACE,mBAAGgC,KAAI,kBAAaf,GAAMpB,OAAO,SAASoC,IAAI,sBAA9C,SACE,mBAAGjC,UAAU,2BAEf,mBAAGgC,KAAI,kBAAab,GAAWtB,OAAO,SAASoC,IAAI,sBAAnD,SACE,mBAAGjC,UAAU,0BAEf,mBAAGgC,KAAI,UAAKX,GAAUxB,OAAO,SAASoC,IAAI,sBAA1C,SACE,mBAAGjC,UAAU,gC,iBCuCRkC,MA5Df,WAGE,MAA0C9C,mBAAS,IAAnD,mBAAQ+C,EAAR,KAAsBhD,EAAtB,KACA,EAA8BC,mBAAS,IAAvC,mBAAQsB,EAAR,KAAgB0B,EAAhB,KACA,EAA8BhD,mBAAS,IAAvC,mBAAQC,EAAR,KAAgBgD,EAAhB,KACA,EAAwCjD,oBAAS,GAAjD,mBAAQkD,EAAR,KAAqBC,EAArB,KAyBA,OAvBAC,qBAAU,WACR,GAAwC,IAArCjB,OAAOC,KAAKW,GAAcV,OAA7B,CAEA,IAAMgB,EAAc,uCAAG,0CAAAC,EAAA,6DACbrD,EAAiB8C,EAAjB9C,OAAQC,EAAS6C,EAAT7C,KACVqD,EAFe,oCAEoBtD,EAFpB,YAE8BC,GAC7CsD,EAHe,gEAGiDvD,GAHjD,kBAKsBwD,QAAQC,IAAI,CACnDC,IAAMC,IAAIL,GACVI,IAAMC,IAAIJ,KAPO,mCAKXK,EALW,KAKCC,EALD,KASnBd,EAAUa,EAAWE,KAAKzC,QAC1B2B,EAAUa,EAAWC,KAAKC,QAAQ,IAClCb,GAAe,GAXI,kDAalBA,GAAe,GAbG,0DAAH,qDAgBpBE,OAEC,CAACN,IAGF,eAAC,WAAD,WACE,cAAC,EAAD,CACEhD,gBAAiBA,IAEnB,qBAAKa,UAAU,YAAf,SACIsC,EAEA,mBAAGtC,UAAU,6CAAb,8BAEA,sBAAKA,UAAU,MAAf,UACE,qBAAKA,UAAU,WAAf,SACE,cAAC,EAAD,CACAU,OAAQA,MAIV,qBAAKV,UAAU,WAAf,SACE,cAAC,EAAD,CACAX,OAAQA,eC5CPgE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.1b8a5263.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Form = ({setSearchLyrics}) => {\r\n\r\n  const [search, setSearch ] = useState({\r\n    artist: \"\",\r\n    song: \"\"\r\n  });\r\n  const [ error, setError ] = useState(false);\r\n\r\n  const  { artist , song } = search;\r\n\r\n  // Funct for each input to read its content\r\n  const handleChange = (event) => {\r\n    setSearch({\r\n      ...search,\r\n      [event.target.name]: event.target.value\r\n    })\r\n  }\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n\r\n    // Data Validation:\r\n    if(artist.trim() === \"\" || song.trim() === \"\") {\r\n      setError(true);\r\n      return;\r\n    }\r\n    setError(false);\r\n    // Send to App component\r\n    setSearchLyrics(search);\r\n  }\r\n\r\n  return(\r\n    <div className=\"bg-info\">\r\n      <div className=\"container\">\r\n        <div className=\"row\">\r\n          <form \r\n            onSubmit={handleSubmit}\r\n            action=\"\"\r\n            className=\"col card text-white bg-transparent mb-5 pt-5 pb-2\"\r\n          >\r\n            <fieldset>\r\n              <legend className=\"text-center center-vert\">\r\n                Search your favourite Artists and Lyrics\r\n              </legend>\r\n              <div className=\"row\">\r\n                <div className=\"col-md-6\">  \r\n                  <div className=\"form-group\">\r\n                    <label htmlFor=\"\">Song</label>\r\n                    <input \r\n                      type=\"text\"\r\n                      className=\"form-control\"\r\n                      name=\"song\"\r\n                      placeholder=\"Song name\"\r\n                      onChange={handleChange}\r\n                      value={song}\r\n                    />\r\n                  </div>\r\n                </div>\r\n                <div className=\"col-md-6\">\r\n                  <div className=\"form-group\">\r\n                    <label htmlFor=\"\">Artist</label>\r\n                    <input \r\n                      type=\"text\"\r\n                      className=\"form-control\"\r\n                      name=\"artist\"\r\n                      placeholder=\"Artist name\"\r\n                      onChange={handleChange}\r\n                      value={artist}\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              <button\r\n                type=\"submit\"\r\n                className=\"btn btn-primary float-right button\"\r\n              >\r\n                Search\r\n              </button>\r\n            </fieldset>\r\n          </form>\r\n        </div>\r\n      </div>\r\n      {error &&\r\n        <p className=\"alert alert-danger text-center p-2\">All field are required!</p> \r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nForm.propTypes = {\r\n  setSearchLyrics: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Form;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Song = ({lyrics}) => {\r\n  if(!lyrics) return null;\r\n\r\n  return(\r\n    <div className=\"container__lyrics\">\r\n      <h2>Song Lyrics</h2>\r\n      <p className=\"lyrics\">{lyrics}</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nSong.propTypes = {\r\n  lyrics: PropTypes.string.isRequired\r\n}\r\n\r\nexport default Song;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Artist = ({artist}) => {\r\n\r\n  const { strArtist: name, strArtistLogo: logo, strBiographyEN: bio, strFacebook: fb, strTwitter: twitter, strLastFMChart: lastFM } = artist;\r\n\r\n  if(Object.keys(artist).length === 0) return null;\r\n\r\n  const random = Math.floor(2+ 3*Math.random()) \r\n\r\n  return(\r\n    <div className=\"container__artist\">\r\n      <div className=\"container__artist-title\">\r\n        <h2 className=\"artist\">{name}</h2>\r\n        <img src={logo} alt={name} width=\"100\"/>\r\n      </div>\r\n      <img className=\"artist__pic\" src={artist[`strArtistFanart${random}`]} alt={name} width=\"300\" />\r\n      <p className=\"artist__info\">{bio}</p>\r\n      <p className=\"card__text\">\r\n        <a href={`https://${fb}`} target=\"_blank\" rel=\"noopener noreferrer\">\r\n          <i className=\"fab fa-facebook icon\"></i>\r\n        </a>\r\n        <a href={`https://${twitter}`} target=\"_blank\" rel=\"noopener noreferrer\">\r\n          <i className=\"fab fa-twitter icon\"></i>\r\n        </a>\r\n        <a href={`${lastFM}`} target=\"_blank\" rel=\"noopener noreferrer\">\r\n          <i className=\"fab fa-lastfm icon\"></i>\r\n        </a>\r\n      </p>\r\n    </div>\r\n  );\r\n}\r\n\r\nArtist.propTypes = {\r\n  artist: PropTypes.object.isRequired\r\n}\r\n\r\nexport default Artist;","import React, { Fragment, useState, useEffect } from 'react';\nimport Form from './components/Form';\nimport Song from './components/Song';\nimport Artist from './components/Artist';\nimport axios from 'axios';\n\nfunction App() {\n\n  //State\n  const [ searchLyrics, setSearchLyrics ] = useState({});\n  const [ lyrics, setLyrics ] = useState(\"\");\n  const [ artist, setArtist ] = useState({});\n  const [ lyricsError, setLyricsError ] = useState(false);\n\n  useEffect(() => {\n    if(Object.keys(searchLyrics).length === 0) return;\n    \n    const fetchLyricsAPI = async () => {\n      const { artist, song } = searchLyrics;\n      const url = `https://api.lyrics.ovh/v1/${artist}/${song}`;\n      const url2 = `https://www.theaudiodb.com/api/v1/json/2/search.php?s=${artist}`;\n      try {\n        const [ lyricsData, artistData ] = await Promise.all([\n          axios.get(url),\n          axios.get(url2)\n        ]);\n        setLyrics(lyricsData.data.lyrics);\n        setArtist(artistData.data.artists[0]);\n        setLyricsError(false);\n      } catch(err) {\n         setLyricsError(true);\n      }\n    }\n    fetchLyricsAPI();\n\n  }, [searchLyrics]); \n\n  return (\n    <Fragment>\n      <Form \n        setSearchLyrics={setSearchLyrics}\n      />\n      <div className=\"container\">\n        { lyricsError \n        ?\n          <p className=\"alert alert-danger text-center error__info\">Lyrics not found</p>\n        :\n          <div className=\"row\">\n            <div className=\"col-md-6\">\n              <Song\n              lyrics={lyrics}\n              />\n            \n            </div>\n            <div className=\"col-md-6\">\n              <Artist\n              artist={artist}\n              />\n            </div>\n          </div>\n        }\n      </div>\n    </Fragment>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}